# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # Run Jest tests
      - name: Run Jest tests
        run: npm test

      # Generate and upload test reports
      - name: Generate and upload test reports
        run: |
          mkdir -p test-reports
          jest --json --outputFile=test-reports/jest-results.json
        continue-on-error: true
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: test-reports

      # Run ESLint
      - name: Run ESLint
        run: npm run lint

      # Generate and upload linting reports
      - name: Generate and upload linting reports
        run: |
          mkdir -p lint-reports
          eslint . -f json -o lint-reports/eslint-results.json
        continue-on-error: true
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-reports
          path: lint-reports

      # Generate code coverage report
      - name: Generate code coverage report
        run: jest --coverage

      # Set minimum code coverage threshold
      - name: Set minimum code coverage threshold
        run: jest --coverage --coverageThreshold='{"global": {"branches": 80, "functions": 80, "lines": 80, "statements": 80}}'
